using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class ExploitState : CharacterState
{
    private GameObject closestResource;
    private bool isFacingResource = false;
    public ExploitState(CharacterStateManager manager) : base(manager) { }
    public override void EnterState()
    {
        isFacingResource = false;
        closestResource = stateManager.moveInZoneResource.GetClosestResource();
        if (closestResource == null)
        {
            stateManager.SwitchState(stateManager.idleState);
            return;
        }
      
    }

    public override void UpdateState()
    {
        if (!stateManager.moveInZoneResource.IsZoneResource || stateManager.IsMoving())
        {
            stateManager.animator.SetBool("isCollecting", false);
            stateManager.SwitchState(stateManager.movingState);
            return;
        }

        if (!stateManager.IsMoving() && !isFacingResource)
        {
            RotateTowardsResource();
        }

        if (isFacingResource)
        {
            stateManager.animator.SetBool("isCollecting", true);
        }
    }

    private void RotateTowardsResource()
    {
        if (closestResource == null) return;

        Vector3 direction = (closestResource.transform.position - stateManager.transform.position).normalized;
        direction.y = 0;

        if (direction != Vector3.zero)
        {
            Quaternion targetRotation = Quaternion.LookRotation(direction);
            stateManager.transform.rotation = Quaternion.Slerp(stateManager.transform.rotation, targetRotation, stateManager.rotationSpeed * Time.deltaTime);
            if (Quaternion.Angle(stateManager.transform.rotation, targetRotation) < 5f)
            {
                isFacingResource = true;
            }
        }
    }

    public override void ExitState()
    {
        if (stateManager.moveInZoneResource.IsZoneResource == false)
        {
            stateManager.animator.SetBool("isCollecting", false);
        }
    }

    
}
